#!/usr/bin/env python3
"""
NetflixFinder CLI - Command Line Interface for searching Netflix content.

This program provides an interactive interface to search for movies and series
using the NetflixFinder service with semantic search.
"""

import sys  # Importa el m√≥dulo est√°ndar para operaciones del sistema y argumentos de l√≠nea de comandos
import os  # Importa el m√≥dulo est√°ndar para operaciones del sistema y variables de entorno
import logging  # Importa el m√≥dulo est√°ndar para logging y seguimiento de eventos
from typing import Optional, List, Dict, Any  # Importa tipos para anotaciones de funciones y variables
from pathlib import Path  # Importa Path para manipulaci√≥n de rutas de archivos

# Add the services directory to the path to import NetflixFinderService
sys.path.append(str(Path(__file__).parent / "services"))  # Agrega el directorio de servicios al path para importar NetflixFinderService

from services.netflixFinder import NetflixFinderService  # Importa el servicio de b√∫squeda de Netflix
from langchain_openai import ChatOpenAI  # Importa el modelo de chat de OpenAI para procesamiento de lenguaje natural
from dotenv import load_dotenv  # Importa la funci√≥n para cargar variables de entorno desde un archivo .env

# Load environment variables from .env file
load_dotenv()  # Carga las variables de entorno desde el archivo .env

# Configure logging
logging.basicConfig(
    level=logging.INFO,  # Establece el nivel de logging en INFO para mostrar mensajes informativos
    format='%(asctime)s - %(levelname)s - %(message)s'  # Define el formato de los mensajes de log
)
logger = logging.getLogger(__name__)  # Crea un logger espec√≠fico para este m√≥dulo

class NetflixFinderCLI:
    """
    Command Line Interface for NetflixFinder service.
    
    Provides interactive prompts for search queries with semantic search capabilities.
    """
    
    def __init__(self):
        """Initialize the CLI with NetflixFinder service."""
        try:
            # Get OpenAI API key from environment variables
            openai_api_key = os.getenv("OPENAI_API_KEY")  # Obtiene la clave de API de OpenAI desde las variables de entorno
            if not openai_api_key:  # Verifica si la clave de API existe
                raise ValueError("OPENAI_API_KEY not found in environment variables")  # Lanza un error si no se encuentra la clave
            
            # Initialize the language model for processing
            llm = ChatOpenAI(api_key=openai_api_key, model="gpt-4")  # Inicializa el modelo de lenguaje GPT-4 para procesamiento
            
            # Define the Pinecone index name for the vector database
            index_name = "streaming-content"  # Define el nombre del √≠ndice en Pinecone donde est√°n almacenados los datos de pel√≠culas
            
            # Initialize the NetflixFinder service with required parameters
            self.finder = NetflixFinderService(llm=llm, index_name=index_name)  # Inicializa el servicio con el modelo de lenguaje y el nombre del √≠ndice
            print("‚úÖ NetflixFinder CLI initialized successfully!")  # Imprime mensaje de √©xito al inicializar
        except Exception as e:
            print(f"‚ùå Error initializing NetflixFinder service: {e}")  # Imprime mensaje de error si falla la inicializaci√≥n
            sys.exit(1)  # Termina el programa con c√≥digo de error
    
    def get_user_input(self, prompt: str, default: str = "") -> str:
        """
        Get user input with optional default value.
        
        Args:
            prompt: The prompt to show to the user
            default: Default value if user just presses Enter
            
        Returns:
            User input or default value
        """
        if default:  # Si hay un valor por defecto disponible
            user_input = input(f"{prompt} (default: {default}): ").strip()  # Solicita entrada del usuario mostrando el valor por defecto
            return user_input if user_input else default  # Retorna la entrada del usuario o el valor por defecto si est√° vac√≠o
        else:
            return input(f"{prompt}: ").strip()  # Solicita entrada del usuario sin valor por defecto
    
    def get_optional_int(self, prompt: str, default: int = 5) -> int:
        """
        Get optional integer input from user with default value.
        
        Args:
            prompt: The prompt to show to the user
            default: Default integer value
            
        Returns:
            Integer value or default if user presses Enter
        """
        user_input = self.get_user_input(prompt, str(default))  # Solicita entrada del usuario con valor por defecto convertido a string
        try:
            return int(user_input)  # Intenta convertir la entrada a entero
        except ValueError:
            print(f"‚ùå Invalid number format. Using default value: {default}")  # Imprime mensaje de error si la conversi√≥n falla
            return default  # Retorna el valor por defecto en caso de error
    
    def display_search_results(self, results: Dict[str, Any], query: str) -> None:
        """
        Display search results in a formatted way showing context movies and LLM answer.
        
        Args:
            results: Search results from NetflixFinder service containing context and answer
            query: Original search query
        """
        print("\n" + "="*60)  # Imprime separador visual para los resultados
        print(f"üé¨ SEARCH RESULTS FOR: '{query}'")  # Imprime el encabezado con la consulta original
        print("="*60)  # Imprime l√≠nea separadora
        
        # Display movies found in context
        context_movies = results.get('context', [])  # Obtiene la lista de pel√≠culas del contexto de resultados
        if not context_movies:  # Verifica si no hay pel√≠culas en el contexto
            print("‚ùå No movies found in context for your search criteria.")  # Imprime mensaje de no resultados
            return
        
        print(f"‚úÖ Found {len(context_movies)} movies in context\n")  # Imprime el n√∫mero de pel√≠culas encontradas
        
        print("üìΩÔ∏è  MOVIES IN CONTEXT:")  # Imprime encabezado para las pel√≠culas en contexto
        print("-" * 40)  # Imprime l√≠nea separadora
        
        # Iterate through each movie in the context and display its information
        for i, doc in enumerate(context_movies, 1):  # Itera sobre cada documento de pel√≠cula en el contexto
            title = doc.metadata.get('title', 'Unknown Title')  # Obtiene el t√≠tulo de la pel√≠cula o un valor por defecto
            poster_url = doc.metadata.get('poster_url', 'No poster URL available')  # Obtiene la URL del p√≥ster o un valor por defecto
            overview = doc.metadata.get('overview', 'No overview available')  # Obtiene la sinopsis de la pel√≠cula o un valor por defecto
            release_date = doc.metadata.get('release_date', 'N/A')  # Obtiene la fecha de lanzamiento o un valor por defecto
            vote_average = doc.metadata.get('vote_average', 'N/A')  # Obtiene la calificaci√≥n promedio o un valor por defecto
            genres = doc.metadata.get('genres', 'N/A')  # Obtiene los g√©neros de la pel√≠cula o un valor por defecto
            
            print(f"üéØ MOVIE {i}:")  # Imprime el n√∫mero de la pel√≠cula
            print(f"   Title: {title}")  # Imprime el t√≠tulo de la pel√≠cula
            print(f"   Release Date: {release_date}")  # Imprime la fecha de lanzamiento
            print(f"   Rating: {vote_average}/10")  # Imprime la calificaci√≥n
            print(f"   Genres: {genres}")  # Imprime los g√©neros
            print(f"   Overview: {overview[:150]}{'...' if len(overview) > 150 else ''}")  # Imprime una versi√≥n truncada de la sinopsis
            print(f"   Poster URL: {poster_url}")  # Imprime la URL del p√≥ster
            print("-" * 40)  # Imprime l√≠nea separadora entre pel√≠culas
        
        # Display the LLM-generated recommendation answer
        print("\nü§ñ AI RECOMMENDATION ANALYSIS:")  # Imprime encabezado para el an√°lisis de IA
        print("="*60)  # Imprime l√≠nea separadora
        llm_answer = results.get('answer', 'No recommendation analysis available')  # Obtiene la respuesta del modelo de lenguaje
        print(llm_answer)  # Imprime la respuesta generada por el modelo de IA
        print("="*60)  # Imprime l√≠nea separadora final
    
    def run(self) -> None:
        """
        Main CLI loop for interactive movie search.
        """
        print("üé¨ NETFLIX FINDER CLI")  # Imprime el t√≠tulo de la aplicaci√≥n CLI
        print("="*60)  # Imprime l√≠nea separadora
        print("Welcome to NetflixFinder! Search for movies and series with AI-powered semantic search.")  # Imprime mensaje de bienvenida
        print("="*60)  # Imprime l√≠nea separadora
        
        while True:  # Inicia el bucle principal de la interfaz
            try:
                # Get search query from user
                print("\n" + "="*60)  # Imprime separador visual para nueva b√∫squeda
                query = self.get_user_input("What kind of movie or series do you want to watch?")  # Solicita la consulta de b√∫squeda al usuario
                
                if not query:  # Verifica si el usuario no ingres√≥ una consulta
                    print("‚ùå Please enter a search query.")  # Imprime mensaje de error para consulta vac√≠a
                    continue  # Contin√∫a al siguiente ciclo del bucle
                
                # Perform search using the simplified API
                print(f"\nüîç Searching for: '{query}'")  # Imprime mensaje indicando que se est√° realizando la b√∫squeda
                print("Please wait while our AI analyzes your request...")  # Imprime mensaje de espera mientras se procesa
                
                # Call the search service with only the query parameter
                results = self.finder.search_content(query=query)  # Ejecuta la b√∫squeda usando solo la consulta como par√°metro
                
                # Display the search results
                self.display_search_results(results, query)  # Muestra los resultados de la b√∫squeda formateados
                
                # Ask if user wants to continue searching
                print("\n" + "="*60)  # Imprime separador para opciones de continuaci√≥n
                continue_search = self.get_user_input("Would you like to search for something else? (y/n)", "y").lower()  # Pregunta si el usuario quiere continuar buscando
                if continue_search not in ['y', 'yes', '']:  # Verifica si el usuario no quiere continuar
                    break  # Sale del bucle principal
                
            except KeyboardInterrupt:
                print("\n\nüëã Goodbye! Thanks for using NetflixFinder!")  # Maneja la interrupci√≥n del teclado con mensaje de despedida
                break  # Sale del bucle principal
            except Exception as e:
                print(f"\n‚ùå Error during search: {e}")  # Imprime mensaje de error si ocurre una excepci√≥n
                logger.error(f"Search error: {e}")  # Registra el error en el log
                continue_search = self.get_user_input("An error occurred. Try again? (y/n)", "y").lower()  # Pregunta si el usuario quiere intentar de nuevo
                if continue_search not in ['y', 'yes', '']:  # Verifica si el usuario no quiere continuar
                    break  # Sale del bucle principal
        
        print("\nüëã Thanks for using NetflixFinder CLI! Happy watching! üçø")  # Imprime mensaje final de despedida

def main():
    """Main entry point for the CLI application."""
    try:
        cli = NetflixFinderCLI()  # Crea una instancia de la interfaz CLI
        cli.run()  # Ejecuta el bucle principal de la interfaz
    except KeyboardInterrupt:
        print("\n\nüëã Goodbye!")  # Maneja la interrupci√≥n del teclado con mensaje de despedida
    except Exception as e:
        print(f"\n‚ùå Fatal error: {e}")  # Imprime mensaje de error fatal
        logger.error(f"Fatal error: {e}")  # Registra el error fatal en el log
        sys.exit(1)  # Termina el programa con c√≥digo de error

if __name__ == "__main__":
    main()  # Ejecuta la funci√≥n principal si el script se ejecuta directamente 